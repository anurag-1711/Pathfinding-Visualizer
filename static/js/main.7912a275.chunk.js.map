{"version":3,"sources":["mazeAlgorithms/recursiveDivision.js","mazeAlgorithms/verticalMaze.js","mazeAlgorithms/horizontalMaze.js","pathfindingVisualizer/Node/node.jsx","pathfindingVisualizer/navbar.jsx","pathfindingAlgorithms/dijkstra.js","pathfindingAlgorithms/astar.js","pathfindingAlgorithms/breadthFirstSearch.js","pathfindingAlgorithms/depthFirstSearch.js","pathfindingAlgorithms/randomWalk.js","pathfindingAlgorithms/greedyBestFirstSearch.js","pathfindingAlgorithms/bidirectionalGreedySearch.js","pathfindingVisualizer/pathfindingVisualizer.jsx","mazeAlgorithms/randomMaze.js","index.js"],"names":["walls","Node","props","state","cellHeight","this","row","col","isStart","isFinish","isWall","isVisited","isShortest","onMouseEnter","onMouseDown","onMouseUp","width","height","numRows","numColumns","extraClass","cellWidth","Math","floor","id","className","style","Component","brand","window","innerWidth","NavBar","algorithm","maze","pathState","mazeState","speedState","selection","visualizingAlgorithm","setState","clearPath","generatingMaze","clearGrid","clearTemp","visualizeDijkstra","visualizeAStar","visualizeGreedyBFS","visualizeBidirectionalGreedySearch","visualizeBFS","visualizeDFS","visualizeRandomWalk","generateRandomMaze","generateRecursiveDivisionMaze","generateVerticalMaze","generateHorizontalMaze","speed","value","updateSpeed","href","type","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","onClick","selectAlgorithm","visualizeAlgorithm","selectMaze","generateMaze","changeSpeed","dijkstra","grid","startNode","finishNode","distance","unvisitedNodes","nodes","node","push","getNodes","visitedNodesInOrder","length","sort","a","b","closestNode","shift","Infinity","updateUnvisitedNeighbours","unvisitedNeighbours","neighbours","filter","neighbour","getUnvisitedNeighbours","unvisitedNeighbour","previousNode","getNeighbours","neighbourNotInUnvisitedNodes","manhattenDistance","abs","getRandomNeighbour","neighboursFilteredStartAndWall","neighboursFilteredVisited","random","numNodesVisited","count","isNeighbour","closestNodeStart","closestNodeFinish","rowStart","colStart","rowFinish","colFinish","nodeA","nodeB","recursiveDivisionMaze","vertical","range","horizontal","getRecursiveWalls","dir","num","generateOddRandomNumber","addWall","slice","indexOf","len","result","i","array","max","randomNum","isStartFinish","tempWalls","temp","splice","generateRandomNumber","wall","verticalMaze","choice","getVerticalWalls","horizontalMaze","getHorizontalWalls","initialNum","getInitialNum","innerHeight","initialNumRows","initialNumColumns","PathfindingVisualizer","mouseIsPressed","mazeSpeed","updateDimensions","path","animateShortestPath","nodesInShortestPathOrder","setTimeout","newGrid","updateNodesForRender","document","getElementById","animateAlgorithm","newNode","animateRandomWalk","animateMaze","getNewGridWithMaze","addEventListener","getInitialGrid","getNewGridWithWalls","getGridWithoutPath","visitedNodesInOrderStart","visitedNodesInOrderFinish","isShortedPath","getVisitedNodesInOrder","undefined","currentNode","unshift","getNodesInShortestPathOrderDijkstra","totalDistance","astar","getNodesInShortestPathOrderAstar","breadthFirstSearch","getNodesInShortestPathOrderBFS","depthFirstSearch","getNodesInShortestPathOrderDFS","maxNodes","maxNodesVisitedTracker","loopTracker","randomNeighbour","nodesVisited","randomWalk","greedyBFS","getNodesInShortestPathOrderGreedyBFS","unvisitedNodesStart","unvisitedNodesFinish","bidirectionalGreedySearch","getNodesInShortestPathOrderBidirectionalGreedySearch","animateBidirectionalAlgorithm","randomMaze","Fragment","bind","map","rowId","key","nodeId","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","n","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.7912a275.chunk.js","sourcesContent":["let walls;\r\nexport function recursiveDivisionMaze(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let vertical = range(grid[0].length);\r\n  let horizontal = range(grid.length);\r\n  walls = [];\r\n  getRecursiveWalls(vertical, horizontal, grid, startNode, finishNode);\r\n  return walls;\r\n}\r\n\r\nfunction range(len) {\r\n  let result = [];\r\n  for (let i = 0; i < len; i++) {\r\n    result.push(i);\r\n  }\r\n  return result;\r\n}\r\n\r\n//dir === 0 => Horizontal\r\n//dir === 1 => Vertical\r\n\r\nfunction getRecursiveWalls(vertical, horizontal, grid, startNode, finishNode) {\r\n  if (vertical.length < 2 || horizontal.length < 2) {\r\n    return;\r\n  }\r\n  let dir;\r\n  let num;\r\n  if (vertical.length > horizontal.length) {\r\n    dir = 0;\r\n    num = generateOddRandomNumber(vertical);\r\n  }\r\n  if (vertical.length <= horizontal.length) {\r\n    dir = 1;\r\n    num = generateOddRandomNumber(horizontal);\r\n  }\r\n\r\n  if (dir === 0) {\r\n    addWall(dir, num, vertical, horizontal, startNode, finishNode);\r\n    getRecursiveWalls(\r\n      vertical.slice(0, vertical.indexOf(num)),\r\n      horizontal,\r\n      grid,\r\n      startNode,\r\n      finishNode\r\n    );\r\n    getRecursiveWalls(\r\n      vertical.slice(vertical.indexOf(num) + 1),\r\n      horizontal,\r\n      grid,\r\n      startNode,\r\n      finishNode\r\n    );\r\n  } else {\r\n    addWall(dir, num, vertical, horizontal, startNode, finishNode);\r\n    getRecursiveWalls(\r\n      vertical,\r\n      horizontal.slice(0, horizontal.indexOf(num)),\r\n      grid,\r\n      startNode,\r\n      finishNode\r\n    );\r\n    getRecursiveWalls(\r\n      vertical,\r\n      horizontal.slice(horizontal.indexOf(num) + 1),\r\n      grid,\r\n      startNode,\r\n      finishNode\r\n    );\r\n  }\r\n}\r\n\r\nfunction generateOddRandomNumber(array) {\r\n  let max = array.length - 1;\r\n  let randomNum =\r\n    Math.floor(Math.random() * (max / 2)) +\r\n    Math.floor(Math.random() * (max / 2));\r\n  if (randomNum % 2 === 0) {\r\n    if (randomNum === max) {\r\n      randomNum -= 1;\r\n    } else {\r\n      randomNum += 1;\r\n    }\r\n  }\r\n  return array[randomNum];\r\n}\r\n\r\n//dir === 0 => Horizontal\r\n//dir === 1 => Vertical\r\n\r\nfunction addWall(dir, num, vertical, horizontal, startNode, finishNode) {\r\n  let isStartFinish = false;\r\n  let tempWalls = [];\r\n  if (dir === 0) {\r\n    if (horizontal.length === 2) return;\r\n    for (let temp of horizontal) {\r\n      if (\r\n        (temp === startNode.row && num === startNode.col) ||\r\n        (temp === finishNode.row && num === finishNode.col)\r\n      ) {\r\n        isStartFinish = true;\r\n        continue;\r\n      }\r\n      tempWalls.push([temp, num]);\r\n    }\r\n  } else {\r\n    if (vertical.length === 2) return;\r\n    for (let temp of vertical) {\r\n      if (\r\n        (num === startNode.row && temp === startNode.col) ||\r\n        (num === finishNode.row && temp === finishNode.col)\r\n      ) {\r\n        isStartFinish = true;\r\n        continue;\r\n      }\r\n      tempWalls.push([num, temp]);\r\n    }\r\n  }\r\n  if (!isStartFinish) {\r\n    tempWalls.splice(generateRandomNumber(tempWalls.length), 1);\r\n  }\r\n  for (let wall of tempWalls) {\r\n    walls.push(wall);\r\n  }\r\n}\r\n\r\nfunction generateRandomNumber(max) {\r\n  let randomNum =\r\n    Math.floor(Math.random() * (max / 2)) +\r\n    Math.floor(Math.random() * (max / 2));\r\n  if (randomNum % 2 !== 0) {\r\n    if (randomNum === max) {\r\n      randomNum -= 1;\r\n    } else {\r\n      randomNum += 1;\r\n    }\r\n  }\r\n  return randomNum;\r\n}\r\n","let walls;\r\nexport function verticalMaze(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let vertical = range(grid[0].length);\r\n  let horizontal = range(grid.length);\r\n  walls = [];\r\n  getVerticalWalls(vertical, horizontal, startNode, finishNode);\r\n  return walls;\r\n}\r\n\r\nfunction range(len) {\r\n  let result = [];\r\n  for (let i = 0; i < len; i++) {\r\n    result.push(i);\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction getVerticalWalls(vertical, horizontal, startNode, finishNode) {\r\n  if (vertical.length < 2) {\r\n    return;\r\n  }\r\n\r\n  let choice = Math.floor(Math.random() * 2);\r\n  for (let num of vertical) {\r\n    if (choice === 0 && num % 2 !== 0) {\r\n      addWall(num, horizontal, startNode, finishNode);\r\n    }\r\n    if (choice === 1 && num % 2 === 0) {\r\n      addWall(num, horizontal, startNode, finishNode);\r\n    }\r\n  }\r\n}\r\n\r\nfunction addWall(num, horizontal, startNode, finishNode) {\r\n  let isStartFinish = false;\r\n  let tempWalls = [];\r\n  for (let temp of horizontal) {\r\n    if (\r\n      (temp === startNode.row && num === startNode.col) ||\r\n      (temp === finishNode.row && num === finishNode.col)\r\n    ) {\r\n      isStartFinish = true;\r\n      continue;\r\n    }\r\n    tempWalls.push([temp, num]);\r\n  }\r\n  if (!isStartFinish) {\r\n    tempWalls.splice(Math.floor(Math.random() * tempWalls.length), 1);\r\n  }\r\n  for (let wall of tempWalls) {\r\n    walls.push(wall);\r\n  }\r\n}\r\n","let walls;\r\nexport function horizontalMaze(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let vertical = range(grid[0].length);\r\n  let horizontal = range(grid.length);\r\n  walls = [];\r\n  getHorizontalWalls(vertical, horizontal, startNode, finishNode);\r\n  return walls;\r\n}\r\n\r\nfunction range(len) {\r\n  let result = [];\r\n  for (let i = 0; i < len; i++) {\r\n    result.push(i);\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction getHorizontalWalls(vertical, horizontal, startNode, finishNode) {\r\n  if (horizontal.length < 2) {\r\n    return;\r\n  }\r\n\r\n  let choice = Math.floor(Math.random() * 2);\r\n  for (let num of horizontal) {\r\n    if (choice === 0 && num % 2 !== 0) {\r\n      addWall(num, vertical, startNode, finishNode);\r\n    }\r\n    if (choice === 1 && num % 2 === 0) {\r\n      addWall(num, vertical, startNode, finishNode);\r\n    }\r\n  }\r\n}\r\n\r\nfunction addWall(num, vertical, startNode, finishNode) {\r\n  let isStartFinish = false;\r\n  let tempWalls = [];\r\n  for (let temp of vertical) {\r\n    if (\r\n      (num === startNode.row && temp === startNode.col) ||\r\n      (num === finishNode.row && temp === finishNode.col)\r\n    ) {\r\n      isStartFinish = true;\r\n      continue;\r\n    }\r\n    tempWalls.push([num, temp]);\r\n  }\r\n  if (!isStartFinish) {\r\n    tempWalls.splice(Math.floor(Math.random() * tempWalls.length), 1);\r\n  }\r\n  for (let wall of tempWalls) {\r\n    walls.push(wall);\r\n  }\r\n}\r\n"," import React, { Component } from \"react\";\r\nimport \"./node.css\";\r\n\r\nclass Node extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      row,\r\n      col,\r\n      isStart,\r\n      isFinish,\r\n      isWall,\r\n      isVisited,\r\n      isShortest,\r\n      onMouseEnter,\r\n      onMouseDown,\r\n      onMouseUp,\r\n      width,\r\n      height,\r\n      numRows,\r\n      numColumns,\r\n    } = this.props;\r\n\r\n    const extraClass = isStart\r\n      ? \"node node-start\"\r\n      : isFinish\r\n      ? \"node node-finish\"\r\n      : isWall\r\n      ? \"node-wall\"\r\n      : isShortest\r\n      ? \"node node-shortest-path\"\r\n      : isVisited\r\n      ? \"node node-visited\"\r\n      : \"node\";\r\n\r\n    let cellWidth = Math.floor((width - 15) / numColumns);\r\n    let cellHeight;\r\n    if (width > 1500) {\r\n      cellHeight = Math.floor((height - 70) / numRows);\r\n    } else if (width > 1000) {\r\n      cellHeight = Math.floor((height - 70) / numRows);\r\n    } else if (width > 500) {\r\n      cellHeight = Math.floor((height - 60) / numRows);\r\n    } else if (width > 0) {\r\n      cellHeight = Math.floor((height - 50) / numRows);\r\n    }\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`${extraClass}`}\r\n        style={{ \"--width\": `${cellWidth}px`, \"--height\": `${cellHeight}px` }}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseUp={() => onMouseUp()}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Node;\r\n","import React, { Component } from \"react\";\r\nimport \"./navbar.css\";\r\n\r\nconst brand = window.innerWidth > 600 ? \"Pathfinding Visualizer\" : \"Pathfinder\";\r\n\r\nclass NavBar extends Component {\r\n  state = {\r\n    algorithm: \"Visualize Algorithm\",\r\n    maze: \"Generate Maze\",\r\n    pathState: false,\r\n    mazeState: false,\r\n    speedState: \"Speed\",\r\n  };\r\n\r\n  selectAlgorithm(selection) {\r\n    if (this.props.visualizingAlgorithm) {\r\n      return;\r\n    }\r\n    if (\r\n      selection === this.state.algorithm ||\r\n      this.state.algorithm === \"Visualize Algorithm\" ||\r\n      this.state.algorithm === \"Select an Algorithm!\"\r\n    ) {\r\n      this.setState({ algorithm: selection });\r\n    } else if (this.state.pathState) {\r\n      this.clearPath();\r\n      this.setState({ algorithm: selection });\r\n    } else {\r\n      this.setState({ algorithm: selection });\r\n    }\r\n  }\r\n\r\n  selectMaze(selection) {\r\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\r\n      return;\r\n    }\r\n    if (\r\n      selection === this.state.maze ||\r\n      this.state.maze === \"Generate Maze\" ||\r\n      this.state.maze === \"Select a Maze!\"\r\n    ) {\r\n      this.setState({ maze: selection });\r\n    } else if (!this.state.mazeState) {\r\n      this.setState({ maze: selection });\r\n    } else {\r\n      this.clearGrid();\r\n      this.setState({ maze: selection });\r\n    }\r\n  }\r\n\r\n  visualizeAlgorithm() {\r\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\r\n      return;\r\n    }\r\n    if (this.state.pathState) {\r\n      this.clearTemp();\r\n      return;\r\n    }\r\n    if (\r\n      this.state.algorithm === \"Visualize Algorithm\" ||\r\n      this.state.algorithm === \"Select an Algorithm!\"\r\n    ) {\r\n      this.setState({ algorithm: \"Select an Algorithm!\" });\r\n    } else {\r\n      this.setState({ pathState: true });\r\n      if (this.state.algorithm === \"Visualize Dijkstra\")\r\n        this.props.visualizeDijkstra();\r\n      else if (this.state.algorithm === \"Visualize A*\")\r\n        this.props.visualizeAStar();\r\n      else if (this.state.algorithm === \"Visualize Greedy BFS\")\r\n        this.props.visualizeGreedyBFS();\r\n      else if (this.state.algorithm === \"Visualize Bidirectional Greedy\")\r\n        this.props.visualizeBidirectionalGreedySearch();\r\n      else if (this.state.algorithm === \"Visualize Breadth First Search\")\r\n        this.props.visualizeBFS();\r\n      else if (this.state.algorithm === \"Visualize Depth First Search\")\r\n        this.props.visualizeDFS();\r\n      else if (this.state.algorithm === \"Visualize Random Walk\")\r\n        this.props.visualizeRandomWalk();\r\n    }\r\n  }\r\n\r\n  generateMaze() {\r\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\r\n      return;\r\n    }\r\n    if (this.state.mazeState || this.state.pathState) {\r\n      this.clearTemp();\r\n    }\r\n    if (\r\n      this.state.maze === \"Generate Maze\" ||\r\n      this.state.maze === \"Select a Maze!\"\r\n    ) {\r\n      this.setState({ maze: \"Select a Maze!\" });\r\n    } else {\r\n      this.setState({ mazeState: true });\r\n      if (this.state.maze === \"Generate Random Maze\")\r\n        this.props.generateRandomMaze();\r\n      else if (this.state.maze === \"Generate Recursive Maze\")\r\n        this.props.generateRecursiveDivisionMaze();\r\n      else if (this.state.maze === \"Generate Vertical Maze\")\r\n        this.props.generateVerticalMaze();\r\n      else if (this.state.maze === \"Generate Horizontal Maze\")\r\n        this.props.generateHorizontalMaze();\r\n    }\r\n  }\r\n\r\n  clearGrid() {\r\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\r\n      return;\r\n    }\r\n    this.props.clearGrid();\r\n    this.setState({\r\n      algorithm: \"Visualize Algorithm\",\r\n      maze: \"Generate Maze\",\r\n      pathState: false,\r\n      mazeState: false,\r\n    });\r\n  }\r\n\r\n  clearPath() {\r\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\r\n      return;\r\n    }\r\n    this.props.clearPath();\r\n    this.setState({\r\n      pathState: false,\r\n      mazeState: false,\r\n    });\r\n  }\r\n\r\n  clearTemp() {\r\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\r\n      return;\r\n    }\r\n    this.props.clearGrid();\r\n    this.setState({\r\n      pathState: false,\r\n      mazeState: false,\r\n    });\r\n  }\r\n\r\n  changeSpeed(speed) {\r\n    if (this.props.visualizingAlgorithm || this.props.generatingMaze) {\r\n      return;\r\n    }\r\n    let value = [10, 10];\r\n    if (speed === \"Slow\") value = [50, 30];\r\n    else if (speed === \"Medium\") value = [25, 20];\r\n    else if (speed === \"Fast\") value = [10, 10];\r\n    this.setState({ speedState: speed });\r\n    this.props.updateSpeed(value[0], value[1]);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\r\n        <a\r\n          className=\"navbar-brand h1 mb-0\"\r\n          href=\"https://anurag-1711.github.io/pathfinding-visualizer/\"\r\n        >\r\n          {brand}\r\n        </a>\r\n        <div className=\"navbar-collapse\" id=\"navbarNavDropdown\">\r\n          <ul className=\"navbar-nav\">\r\n            <li className=\"nav-item dropdown\">\r\n              <div className=\"dropdown\">\r\n                <button\r\n                  className=\"btn btn-light dropdown-toggle\"\r\n                  type=\"button\"\r\n                  id=\"dropdownMenu1\"\r\n                  data-toggle=\"dropdown\"\r\n                  aria-haspopup=\"true\"\r\n                  aria-expanded=\"false\"\r\n                >\r\n                  Algorithms\r\n                </button>\r\n                <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() => this.selectAlgorithm(\"Visualize Dijkstra\")}\r\n                  >\r\n                    Dijkstra's Algorithm\r\n                  </button>\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() => this.selectAlgorithm(\"Visualize A*\")}\r\n                  >\r\n                    A* Algorithm\r\n                  </button>\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() => this.selectAlgorithm(\"Visualize Greedy BFS\")}\r\n                  >\r\n                    Greedy Best First Search\r\n                  </button>\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() =>\r\n                      this.selectAlgorithm(\"Visualize Bidirectional Greedy\")\r\n                    }\r\n                  >\r\n                    Bidirectional Greedy Search\r\n                  </button>\r\n                  <div className=\"dropdown-divider\"></div>\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() =>\r\n                      this.selectAlgorithm(\"Visualize Breadth First Search\")\r\n                    }\r\n                  >\r\n                    Breadth First Search\r\n                  </button>\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() =>\r\n                      this.selectAlgorithm(\"Visualize Depth First Search\")\r\n                    }\r\n                  >\r\n                    Depth First Search\r\n                  </button>\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() =>\r\n                      this.selectAlgorithm(\"Visualize Random Walk\")\r\n                    }\r\n                  >\r\n                    Random Walk\r\n                  </button>\r\n                </div>\r\n              </div>{\" \"}\r\n            </li>\r\n            <li>\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-success\"\r\n                onClick={() => this.visualizeAlgorithm()}\r\n              >\r\n                {this.state.algorithm}\r\n              </button>\r\n            </li>\r\n            <li className=\"nav-item dropdown\">\r\n              <div className=\"dropdown\">\r\n                <button\r\n                  className=\"btn btn-light dropdown-toggle\"\r\n                  type=\"button\"\r\n                  id=\"dropdownMenu1\"\r\n                  data-toggle=\"dropdown\"\r\n                  aria-haspopup=\"true\"\r\n                  aria-expanded=\"false\"\r\n                >\r\n                  Mazes\r\n                </button>\r\n                <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() => this.selectMaze(\"Generate Random Maze\")}\r\n                  >\r\n                    Random Maze\r\n                  </button>\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() => this.selectMaze(\"Generate Recursive Maze\")}\r\n                  >\r\n                    Recursive Division Maze\r\n                  </button>\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() => this.selectMaze(\"Generate Vertical Maze\")}\r\n                  >\r\n                    Vertical Division Maze\r\n                  </button>\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() => this.selectMaze(\"Generate Horizontal Maze\")}\r\n                  >\r\n                    Horizontal Division Maze\r\n                  </button>\r\n                </div>\r\n              </div>{\" \"}\r\n            </li>\r\n            <li>\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-success\"\r\n                onClick={() => this.generateMaze()}\r\n              >\r\n                {this.state.maze}\r\n              </button>\r\n            </li>\r\n            <li>\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-danger\"\r\n                onClick={() => this.clearGrid()}\r\n              >\r\n                Clear Gird\r\n              </button>\r\n            </li>\r\n            <li className=\"nav-item dropdown\">\r\n              <div className=\"dropdown\">\r\n                <button\r\n                  className=\"btn btn-info dropdown-toggle\"\r\n                  type=\"button\"\r\n                  id=\"dropdownMenu1\"\r\n                  data-toggle=\"dropdown\"\r\n                  aria-haspopup=\"true\"\r\n                  aria-expanded=\"false\"\r\n                >\r\n                  {this.state.speedState}\r\n                </button>\r\n                <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() => this.changeSpeed(\"Slow\")}\r\n                  >\r\n                    Slow\r\n                  </button>\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() => this.changeSpeed(\"Medium\")}\r\n                  >\r\n                    Medium\r\n                  </button>\r\n                  <button\r\n                    className=\"dropdown-item btn-light\"\r\n                    type=\"button\"\r\n                    onClick={() => this.changeSpeed(\"Fast\")}\r\n                  >\r\n                    Fast\r\n                  </button>\r\n                </div>\r\n              </div>{\" \"}\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\nexport default NavBar;\r\n","export function dijkstra(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  startNode.distance = 0;\r\n  let unvisitedNodes = getNodes(grid);\r\n  let visitedNodesInOrder = [];\r\n  while (unvisitedNodes.length !== 0) {\r\n    unvisitedNodes.sort((a, b) => a.distance - b.distance);\r\n    let closestNode = unvisitedNodes.shift();\r\n    if (closestNode.isWall) continue;\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    updateUnvisitedNeighbours(closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction getNodes(grid) {\r\n  let nodes = [];\r\n  for (let row of grid) {\r\n    for (let node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\nfunction updateUnvisitedNeighbours(node, grid) {\r\n  let unvisitedNeighbours = getUnvisitedNeighbours(node, grid);\r\n  for (let unvisitedNeighbour of unvisitedNeighbours) {\r\n    unvisitedNeighbour.distance = node.distance + 1;\r\n    unvisitedNeighbour.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbours(node, grid) {\r\n  let neighbours = [];\r\n  let { row, col } = node;\r\n  if (row !== 0) neighbours.push(grid[row - 1][col]);\r\n  if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\r\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\r\n  if (col !== 0) neighbours.push(grid[row][col - 1]);\r\n  return neighbours\r\n    .filter((neighbour) => !neighbour.isWall)\r\n    .filter((neighbour) => !neighbour.isVisited);\r\n}\r\n\r\nexport function getNodesInShortestPathOrderDijkstra(finishNode) {\r\n  let nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","export function astar(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let unvisitedNodes = []; //open list\r\n  let visitedNodesInOrder = []; //closed list\r\n  startNode.distance = 0;\r\n  unvisitedNodes.push(startNode);\r\n\r\n  while (unvisitedNodes.length !== 0) {\r\n    unvisitedNodes.sort((a, b) => a.totalDistance - b.totalDistance);\r\n    let closestNode = unvisitedNodes.shift();\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n\r\n    let neighbours = getNeighbours(closestNode, grid);\r\n    for (let neighbour of neighbours) {\r\n      let distance = closestNode.distance + 1;\r\n      //f(n) = g(n) + h(n)\r\n      if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes)) {\r\n        unvisitedNodes.unshift(neighbour);\r\n        neighbour.distance = distance;\r\n        neighbour.totalDistance =\r\n          distance + manhattenDistance(neighbour, finishNode);\r\n        neighbour.previousNode = closestNode;\r\n      } else if (distance < neighbour.distance) {\r\n        neighbour.distance = distance;\r\n        neighbour.totalDistance =\r\n          distance + manhattenDistance(neighbour, finishNode);\r\n        neighbour.previousNode = closestNode;\r\n      }\r\n    }\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nfunction getNeighbours(node, grid) {\r\n  let neighbours = [];\r\n  let { row, col } = node;\r\n  if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\r\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\r\n  if (col !== 0) neighbours.push(grid[row][col - 1]);\r\n  if (row !== 0) neighbours.push(grid[row - 1][col]);\r\n  return neighbours.filter(\r\n    (neighbour) => !neighbour.isWall && !neighbour.isVisited\r\n  );\r\n}\r\n\r\nfunction neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes) {\r\n  for (let node of unvisitedNodes) {\r\n    if (node.row === neighbour.row && node.col === neighbour.col) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction manhattenDistance(node, finishNode) {\r\n  let x = Math.abs(node.row - finishNode.row);\r\n  let y = Math.abs(node.col - finishNode.col);\r\n  return x + y;\r\n}\r\n\r\nexport function getNodesInShortestPathOrderAstar(finishNode) {\r\n  let nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","export function breadthFirstSearch(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let unvisitedNodes = [];\r\n  let visitedNodesInOrder = [];\r\n  unvisitedNodes.push(startNode);\r\n  while (unvisitedNodes.length !== 0) {\r\n    let closestNode = unvisitedNodes.shift();\r\n    if (closestNode.isWall) continue;\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    visitedNodesInOrder.push(closestNode);\r\n    closestNode.isVisited = true;\r\n    let unvisitedNeighbours = getUnvisitedNeighbours(closestNode, grid);\r\n    for (let unvisitedNeighbour of unvisitedNeighbours) {\r\n      unvisitedNeighbour.previousNode = closestNode;\r\n      if (neighbourNotInUnvisitedNodes(unvisitedNeighbour, unvisitedNodes)) {\r\n        unvisitedNodes.push(unvisitedNeighbour);\r\n      }\r\n    }\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nfunction getUnvisitedNeighbours(node, grid) {\r\n  let neighbours = [];\r\n  let { row, col } = node;\r\n  if (row !== 0) neighbours.push(grid[row - 1][col]);\r\n  if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\r\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\r\n  if (col !== 0) neighbours.push(grid[row][col - 1]);\r\n  return neighbours.filter((neighbour) => !neighbour.isVisited);\r\n}\r\n\r\nfunction neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes) {\r\n  for (let node of unvisitedNodes) {\r\n    if (node.row === neighbour.row && node.col === neighbour.col) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function getNodesInShortestPathOrderBFS(finishNode) {\r\n  let nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","export function depthFirstSearch(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let unvisitedNodes = [];\r\n  let visitedNodesInOrder = [];\r\n  unvisitedNodes.push(startNode);\r\n  while (unvisitedNodes.length !== 0) {\r\n    let closestNode = unvisitedNodes.shift();\r\n    if (closestNode.isWall) continue;\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    visitedNodesInOrder.push(closestNode);\r\n    closestNode.isVisited = true;\r\n    let unvisitedNeighbours = getUnvisitedNeighbours(closestNode, grid);\r\n    for (let unvisitedNeighbour of unvisitedNeighbours) {\r\n      unvisitedNeighbour.previousNode = closestNode;\r\n      unvisitedNodes.unshift(unvisitedNeighbour);\r\n    }\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nfunction getUnvisitedNeighbours(node, grid) {\r\n  let neighbours = [];\r\n  let { row, col } = node;\r\n  if (col !== 0) neighbours.push(grid[row][col - 1]);\r\n  if (row !== 0) neighbours.push(grid[row - 1][col]);\r\n  if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\r\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\r\n  return neighbours.filter((neighbour) => !neighbour.isVisited);\r\n}\r\n\r\nexport function getNodesInShortestPathOrderDFS(finishNode) {\r\n  let nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","export function randomWalk(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let visitedNodesInOrder = [];\r\n  let closestNode = startNode;\r\n  let maxNodes = grid.length * grid[0].length;\r\n  let maxNodesVisitedTracker = 0;\r\n  let loopTracker = 0;\r\n  while (true) {\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    let randomNeighbour = getRandomNeighbour(closestNode, grid, finishNode);\r\n    let nodesVisited = numNodesVisited(grid);\r\n    if (nodesVisited === maxNodes - 2) {\r\n      return visitedNodesInOrder;\r\n    }\r\n    if (nodesVisited > maxNodesVisitedTracker) {\r\n      maxNodesVisitedTracker = nodesVisited;\r\n      loopTracker = 0;\r\n    } else if ((nodesVisited = maxNodesVisitedTracker)) {\r\n      loopTracker += 1;\r\n      if (loopTracker > 1000) {\r\n        return visitedNodesInOrder;\r\n      }\r\n    }\r\n    randomNeighbour.previousNode = closestNode;\r\n    closestNode = randomNeighbour;\r\n  }\r\n}\r\n\r\nfunction getRandomNeighbour(node, grid, finishNode) {\r\n  let neighbours = [];\r\n  let { row, col } = node;\r\n  if (row !== 0) neighbours.push(grid[row - 1][col]);\r\n  if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\r\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\r\n  if (col !== 0) neighbours.push(grid[row][col - 1]);\r\n  let neighboursFilteredStartAndWall = neighbours.filter(\r\n    (neighbour) => !neighbour.isStart && !neighbour.isWall\r\n  );\r\n  let neighboursFilteredVisited = neighboursFilteredStartAndWall.filter(\r\n    (neighbour) => !neighbour.isVisited\r\n  );\r\n  if (neighboursFilteredVisited.length > 0) {\r\n    return neighboursFilteredVisited[\r\n      Math.floor(Math.random() * neighboursFilteredVisited.length)\r\n    ];\r\n  }\r\n  return neighboursFilteredStartAndWall[\r\n    Math.floor(Math.random() * neighboursFilteredStartAndWall.length)\r\n  ];\r\n}\r\n\r\nfunction numNodesVisited(grid) {\r\n  let count = 0;\r\n  for (let row of grid) {\r\n    for (let node of row) {\r\n      if (node.isVisited || node.isWall) count += 1;\r\n    }\r\n  }\r\n  return count;\r\n}\r\n","export function greedyBFS(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let unvisitedNodes = []; //open list\r\n  let visitedNodesInOrder = []; //closed list\r\n  startNode.distance = 0;\r\n  unvisitedNodes.push(startNode);\r\n\r\n  while (unvisitedNodes.length !== 0) {\r\n    unvisitedNodes.sort((a, b) => a.totalDistance - b.totalDistance);\r\n    let closestNode = unvisitedNodes.shift();\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n\r\n    let neighbours = getNeighbours(closestNode, grid);\r\n    for (let neighbour of neighbours) {\r\n      let distance = closestNode.distance + 1;\r\n      //f(n) = h(n)\r\n      if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes)) {\r\n        unvisitedNodes.unshift(neighbour);\r\n        neighbour.distance = distance;\r\n        neighbour.totalDistance = manhattenDistance(neighbour, finishNode);\r\n        neighbour.previousNode = closestNode;\r\n      } else if (distance < neighbour.distance) {\r\n        neighbour.distance = distance;\r\n        neighbour.totalDistance = manhattenDistance(neighbour, finishNode);\r\n        neighbour.previousNode = closestNode;\r\n      }\r\n    }\r\n  }\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nfunction getNeighbours(node, grid) {\r\n  let neighbours = [];\r\n  let { row, col } = node;\r\n  if (row !== 0) neighbours.push(grid[row - 1][col]);\r\n  if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\r\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\r\n  if (col !== 0) neighbours.push(grid[row][col - 1]);\r\n  return neighbours.filter(\r\n    (neighbour) => !neighbour.isWall && !neighbour.isVisited\r\n  );\r\n}\r\n\r\nfunction manhattenDistance(node, finishNode) {\r\n  let x = Math.abs(node.row - finishNode.row);\r\n  let y = Math.abs(node.col - finishNode.col);\r\n  return x + y;\r\n}\r\n\r\nfunction neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes) {\r\n  for (let node of unvisitedNodes) {\r\n    if (node.row === neighbour.row && node.col === neighbour.col) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function getNodesInShortestPathOrderGreedyBFS(finishNode) {\r\n  let nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","export function bidirectionalGreedySearch(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let unvisitedNodesStart = [];\r\n  let visitedNodesInOrderStart = [];\r\n  let unvisitedNodesFinish = [];\r\n  let visitedNodesInOrderFinish = [];\r\n  startNode.distance = 0;\r\n  finishNode.distance = 0;\r\n  unvisitedNodesStart.push(startNode);\r\n  unvisitedNodesFinish.push(finishNode);\r\n\r\n  while (\r\n    unvisitedNodesStart.length !== 0 &&\r\n    unvisitedNodesFinish.length !== 0\r\n  ) {\r\n    unvisitedNodesStart.sort((a, b) => a.totalDistance - b.totalDistance);\r\n    unvisitedNodesFinish.sort((a, b) => a.totalDistance - b.totalDistance);\r\n    let closestNodeStart = unvisitedNodesStart.shift();\r\n    let closestNodeFinish = unvisitedNodesFinish.shift();\r\n\r\n    closestNodeStart.isVisited = true;\r\n    closestNodeFinish.isVisited = true;\r\n    visitedNodesInOrderStart.push(closestNodeStart);\r\n    visitedNodesInOrderFinish.push(closestNodeFinish);\r\n    if (isNeighbour(closestNodeStart, closestNodeFinish)) {\r\n      return [visitedNodesInOrderStart, visitedNodesInOrderFinish, true];\r\n    }\r\n\r\n    //Start side search\r\n    let neighbours = getNeighbours(closestNodeStart, grid);\r\n    for (let neighbour of neighbours) {\r\n      if (!neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesFinish)) {\r\n        visitedNodesInOrderStart.push(closestNodeStart);\r\n        visitedNodesInOrderFinish.push(neighbour);\r\n        return [visitedNodesInOrderStart, visitedNodesInOrderFinish, true];\r\n      }\r\n      let distance = closestNodeStart.distance + 1;\r\n      //f(n) = h(n)\r\n      if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStart)) {\r\n        unvisitedNodesStart.unshift(neighbour);\r\n        neighbour.distance = distance;\r\n        neighbour.totalDistance = manhattenDistance(neighbour, finishNode);\r\n        neighbour.previousNode = closestNodeStart;\r\n      } else if (distance < neighbour.distance) {\r\n        neighbour.distance = distance;\r\n        neighbour.totalDistance = manhattenDistance(neighbour, finishNode);\r\n        neighbour.previousNode = closestNodeStart;\r\n      }\r\n    }\r\n\r\n    //Finish side search\r\n    neighbours = getNeighbours(closestNodeFinish, grid);\r\n    for (let neighbour of neighbours) {\r\n      if (!neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesStart)) {\r\n        visitedNodesInOrderStart.push(closestNodeFinish);\r\n        visitedNodesInOrderStart.push(neighbour);\r\n        return [visitedNodesInOrderStart, visitedNodesInOrderFinish, true];\r\n      }\r\n      let distance = closestNodeFinish.distance + 1;\r\n      //f(n) = h(n)\r\n      if (neighbourNotInUnvisitedNodes(neighbour, unvisitedNodesFinish)) {\r\n        unvisitedNodesFinish.unshift(neighbour);\r\n        neighbour.distance = distance;\r\n        neighbour.totalDistance = manhattenDistance(neighbour, startNode);\r\n        neighbour.previousNode = closestNodeFinish;\r\n      } else if (distance < neighbour.distance) {\r\n        neighbour.distance = distance;\r\n        neighbour.totalDistance = manhattenDistance(neighbour, startNode);\r\n        neighbour.previousNode = closestNodeFinish;\r\n      }\r\n    }\r\n  }\r\n  return [visitedNodesInOrderStart, visitedNodesInOrderFinish, false];\r\n}\r\n\r\nfunction isNeighbour(closestNodeStart, closestNodeFinish) {\r\n  let rowStart = closestNodeStart.row;\r\n  let colStart = closestNodeStart.col;\r\n  let rowFinish = closestNodeFinish.row;\r\n  let colFinish = closestNodeFinish.col;\r\n  if (rowFinish === rowStart - 1 && colFinish === colStart) return true;\r\n  if (rowFinish === rowStart && colFinish === colStart + 1) return true;\r\n  if (rowFinish === rowStart + 1 && colFinish === colStart) return true;\r\n  if (rowFinish === rowStart && colFinish === colStart - 1) return true;\r\n  return false;\r\n}\r\n\r\nfunction getNeighbours(node, grid) {\r\n  let neighbours = [];\r\n  let { row, col } = node;\r\n  if (row !== 0) neighbours.push(grid[row - 1][col]);\r\n  if (col !== grid[0].length - 1) neighbours.push(grid[row][col + 1]);\r\n  if (row !== grid.length - 1) neighbours.push(grid[row + 1][col]);\r\n  if (col !== 0) neighbours.push(grid[row][col - 1]);\r\n  return neighbours.filter(\r\n    (neighbour) => !neighbour.isWall && !neighbour.isVisited\r\n  );\r\n}\r\n\r\nfunction manhattenDistance(nodeA, nodeB) {\r\n  let x = Math.abs(nodeA.row - nodeB.row);\r\n  let y = Math.abs(nodeA.col - nodeB.col);\r\n  return x + y;\r\n}\r\n\r\nfunction neighbourNotInUnvisitedNodes(neighbour, unvisitedNodes) {\r\n  for (let node of unvisitedNodes) {\r\n    if (node.row === neighbour.row && node.col === neighbour.col) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function getNodesInShortestPathOrderBidirectionalGreedySearch(\r\n  nodeA,\r\n  nodeB\r\n) {\r\n  let nodesInShortestPathOrder = [];\r\n  let currentNode = nodeB;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.push(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  currentNode = nodeA;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./pathfindingVisualizer.css\";\r\nimport Node from \"./Node/node\";\r\nimport NavBar from \"./navbar\";\r\n\r\n//Pathfinding Algorithms\r\nimport {\r\n  dijkstra,\r\n  getNodesInShortestPathOrderDijkstra,\r\n} from \"../pathfindingAlgorithms/dijkstra\";\r\nimport {\r\n  astar,\r\n  getNodesInShortestPathOrderAstar,\r\n} from \"../pathfindingAlgorithms/astar\";\r\nimport {\r\n  breadthFirstSearch,\r\n  getNodesInShortestPathOrderBFS,\r\n} from \"../pathfindingAlgorithms/breadthFirstSearch\";\r\nimport {\r\n  depthFirstSearch,\r\n  getNodesInShortestPathOrderDFS,\r\n} from \"../pathfindingAlgorithms/depthFirstSearch\";\r\nimport { randomWalk } from \"../pathfindingAlgorithms/randomWalk\";\r\nimport {\r\n  greedyBFS,\r\n  getNodesInShortestPathOrderGreedyBFS,\r\n} from \"../pathfindingAlgorithms/greedyBestFirstSearch\";\r\nimport {\r\n  bidirectionalGreedySearch,\r\n  getNodesInShortestPathOrderBidirectionalGreedySearch,\r\n} from \"../pathfindingAlgorithms/bidirectionalGreedySearch\";\r\n\r\n//Maze Algorithms\r\nimport { randomMaze } from \"../mazeAlgorithms/randomMaze\";\r\nimport { recursiveDivisionMaze } from \"../mazeAlgorithms/recursiveDivision\";\r\nimport { verticalMaze } from \"../mazeAlgorithms/verticalMaze\";\r\nimport { horizontalMaze } from \"../mazeAlgorithms/horizontalMaze\";\r\n\r\nconst initialNum = getInitialNum(window.innerWidth, window.innerHeight);\r\nconst initialNumRows = initialNum[0];\r\nconst initialNumColumns = initialNum[1];\r\n\r\nconst startNodeRow = 12;\r\nconst startNodeCol = 10;\r\nconst finishNodeRow = 12;\r\nconst finishNodeCol = 40;\r\n\r\nclass PathfindingVisualizer extends Component {\r\n  state = {\r\n    grid: [],\r\n    mouseIsPressed: false,\r\n    visualizingAlgorithm: false,\r\n    generatingMaze: false,\r\n    width: window.innerWidth,\r\n    height: window.innerHeight,\r\n    numRows: initialNumRows,\r\n    numColumns: initialNumColumns,\r\n    speed: 10,\r\n    mazeSpeed: 10,\r\n  };\r\n\r\n  updateDimensions = () => {\r\n    this.setState({\r\n      width: window.innerWidth,\r\n      height: window.innerHeight,\r\n    });\r\n  };\r\n\r\n  updateSpeed = (path, maze) => {\r\n    this.setState({ speed: path, mazeSpeed: maze });\r\n  };\r\n\r\n  componentDidMount() {\r\n    window.addEventListener(\"resize\", this.updateDimensions);\r\n    const grid = getInitialGrid(this.state.numRows, this.state.numColumns);\r\n    this.setState({ grid });\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    const newGrid = getNewGridWithWalls(this.state.grid, row, col);\r\n    this.setState({ grid: newGrid, mouseIsPressed: true });\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (this.state.mouseIsPressed) {\r\n      const newGrid = getNewGridWithWalls(this.state.grid, row, col);\r\n      this.setState({ grid: newGrid, mouseIsPressed: true });\r\n    }\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({ mouseIsPressed: false });\r\n  }\r\n\r\n  clearGrid() {\r\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\r\n      return;\r\n    }\r\n    for (let row = 0; row < this.state.grid.length; row++) {\r\n      for (let col = 0; col < this.state.grid[0].length; col++) {\r\n        if (\r\n          !(\r\n            (row === startNodeRow && col === startNodeCol) ||\r\n            (row === finishNodeRow && col === finishNodeCol)\r\n          )\r\n        ) {\r\n          document.getElementById(`node-${row}-${col}`).className = \"node\";\r\n        }\r\n      }\r\n    }\r\n    const newGrid = getInitialGrid(this.state.numRows, this.state.numColumns);\r\n    this.setState({\r\n      grid: newGrid,\r\n      visualizingAlgorithm: false,\r\n      generatingMaze: false,\r\n    });\r\n  }\r\n\r\n  clearPath() {\r\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\r\n      return;\r\n    }\r\n    for (let row = 0; row < this.state.grid.length; row++) {\r\n      for (let col = 0; col < this.state.grid[0].length; col++) {\r\n        if (\r\n          document.getElementById(`node-${row}-${col}`).className ===\r\n          \"node node-shortest-path\"\r\n        ) {\r\n          document.getElementById(`node-${row}-${col}`).className = \"node\";\r\n        }\r\n      }\r\n    }\r\n    const newGrid = getGridWithoutPath(this.state.grid);\r\n    this.setState({\r\n      grid: newGrid,\r\n      visualizingAlgorithm: false,\r\n      generatingMaze: false,\r\n    });\r\n  }\r\n\r\n  animateShortestPath = (nodesInShortestPathOrder, visitedNodesInOrder) => {\r\n    if (nodesInShortestPathOrder.length === 1)\r\n      this.setState({ visualizingAlgorithm: false });\r\n    for (let i = 1; i < nodesInShortestPathOrder.length; i++) {\r\n      if (i === nodesInShortestPathOrder.length - 1) {\r\n        setTimeout(() => {\r\n          let newGrid = updateNodesForRender(\r\n            this.state.grid,\r\n            nodesInShortestPathOrder,\r\n            visitedNodesInOrder\r\n          );\r\n          this.setState({ grid: newGrid, visualizingAlgorithm: false });\r\n        }, i * (3 * this.state.speed));\r\n        return;\r\n      }\r\n      let node = nodesInShortestPathOrder[i];\r\n      setTimeout(() => {\r\n        //shortest path node\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-shortest-path\";\r\n      }, i * (3 * this.state.speed));\r\n    }\r\n  };\r\n\r\n  animateAlgorithm = (visitedNodesInOrder, nodesInShortestPathOrder) => {\r\n    let newGrid = this.state.grid.slice();\r\n    for (let row of newGrid) {\r\n      for (let node of row) {\r\n        let newNode = {\r\n          ...node,\r\n          isVisited: false,\r\n        };\r\n        newGrid[node.row][node.col] = newNode;\r\n      }\r\n    }\r\n    this.setState({ grid: newGrid });\r\n    for (let i = 1; i <= visitedNodesInOrder.length; i++) {\r\n      let node = visitedNodesInOrder[i];\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(\r\n            nodesInShortestPathOrder,\r\n            visitedNodesInOrder\r\n          );\r\n        }, i * this.state.speed);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        //visited node\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-visited\";\r\n      }, i * this.state.speed);\r\n    }\r\n  };\r\n\r\n  animateRandomWalk = (visitedNodesInOrder) => {\r\n    for (let i = 1; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.setState({ visualizingAlgorithm: false });\r\n        }, i * this.state.speed);\r\n        return;\r\n      }\r\n      let node = visitedNodesInOrder[i];\r\n      if (i === visitedNodesInOrder.length - 1) {\r\n        setTimeout(() => {\r\n          //finish node\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node-finish-reached\";\r\n        }, i * this.state.speed);\r\n        continue;\r\n      }\r\n      setTimeout(() => {\r\n        //visited node\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-visited\";\r\n      }, i * this.state.speed);\r\n    }\r\n  };\r\n\r\n  animateBidirectionalAlgorithm(\r\n    visitedNodesInOrderStart,\r\n    visitedNodesInOrderFinish,\r\n    nodesInShortestPathOrder,\r\n    isShortedPath\r\n  ) {\r\n    let len = Math.max(\r\n      visitedNodesInOrderStart.length,\r\n      visitedNodesInOrderFinish.length\r\n    );\r\n    for (let i = 1; i <= len; i++) {\r\n      let nodeA = visitedNodesInOrderStart[i];\r\n      let nodeB = visitedNodesInOrderFinish[i];\r\n      if (i === visitedNodesInOrderStart.length) {\r\n        setTimeout(() => {\r\n          let visitedNodesInOrder = getVisitedNodesInOrder(\r\n            visitedNodesInOrderStart,\r\n            visitedNodesInOrderFinish\r\n          );\r\n          if (isShortedPath) {\r\n            this.animateShortestPath(\r\n              nodesInShortestPathOrder,\r\n              visitedNodesInOrder\r\n            );\r\n          } else {\r\n            this.setState({ visualizingAlgorithm: false });\r\n          }\r\n        }, i * this.state.speed);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        //visited nodes\r\n        if (nodeA !== undefined)\r\n          document.getElementById(`node-${nodeA.row}-${nodeA.col}`).className =\r\n            \"node node-visited\";\r\n        if (nodeB !== undefined)\r\n          document.getElementById(`node-${nodeB.row}-${nodeB.col}`).className =\r\n            \"node node-visited\";\r\n      }, i * this.state.speed);\r\n    }\r\n  }\r\n\r\n  visualizeDijkstra() {\r\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\r\n      return;\r\n    }\r\n    this.setState({ visualizingAlgorithm: true });\r\n    setTimeout(() => {\r\n      const { grid } = this.state;\r\n      const startNode = grid[startNodeRow][startNodeCol];\r\n      const finishNode = grid[finishNodeRow][finishNodeCol];\r\n      const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrderDijkstra(\r\n        finishNode\r\n      );\r\n      this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }, this.state.speed);\r\n  }\r\n\r\n  visualizeAStar() {\r\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\r\n      return;\r\n    }\r\n    this.setState({ visualizingAlgorithm: true });\r\n    setTimeout(() => {\r\n      const { grid } = this.state;\r\n      const startNode = grid[startNodeRow][startNodeCol];\r\n      const finishNode = grid[finishNodeRow][finishNodeCol];\r\n      const visitedNodesInOrder = astar(grid, startNode, finishNode);\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrderAstar(\r\n        finishNode\r\n      );\r\n      this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }, this.state.speed);\r\n  }\r\n\r\n  visualizeBFS() {\r\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\r\n      return;\r\n    }\r\n    this.setState({ visualizingAlgorithm: true });\r\n    setTimeout(() => {\r\n      const { grid } = this.state;\r\n      const startNode = grid[startNodeRow][startNodeCol];\r\n      const finishNode = grid[finishNodeRow][finishNodeCol];\r\n      const visitedNodesInOrder = breadthFirstSearch(\r\n        grid,\r\n        startNode,\r\n        finishNode\r\n      );\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrderBFS(\r\n        finishNode\r\n      );\r\n      this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }, this.state.speed);\r\n  }\r\n\r\n  visualizeDFS() {\r\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\r\n      return;\r\n    }\r\n    this.setState({ visualizingAlgorithm: true });\r\n    setTimeout(() => {\r\n      const { grid } = this.state;\r\n      const startNode = grid[startNodeRow][startNodeCol];\r\n      const finishNode = grid[finishNodeRow][finishNodeCol];\r\n      const visitedNodesInOrder = depthFirstSearch(grid, startNode, finishNode);\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrderDFS(\r\n        finishNode\r\n      );\r\n      this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }, this.state.speed);\r\n  }\r\n\r\n  visualizeRandomWalk() {\r\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\r\n      return;\r\n    }\r\n    this.setState({ visualizingAlgorithm: true });\r\n    setTimeout(() => {\r\n      const { grid } = this.state;\r\n      const startNode = grid[startNodeRow][startNodeCol];\r\n      const finishNode = grid[finishNodeRow][finishNodeCol];\r\n      const visitedNodesInOrder = randomWalk(grid, startNode, finishNode);\r\n      this.animateRandomWalk(visitedNodesInOrder);\r\n    }, this.state.speed);\r\n  }\r\n\r\n  visualizeGreedyBFS() {\r\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\r\n      return;\r\n    }\r\n    this.setState({ visualizingAlgorithm: true });\r\n    setTimeout(() => {\r\n      const { grid } = this.state;\r\n      const startNode = grid[startNodeRow][startNodeCol];\r\n      const finishNode = grid[finishNodeRow][finishNodeCol];\r\n      const visitedNodesInOrder = greedyBFS(grid, startNode, finishNode);\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrderGreedyBFS(\r\n        finishNode\r\n      );\r\n      this.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }, this.state.speed);\r\n  }\r\n\r\n  visualizeBidirectionalGreedySearch() {\r\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\r\n      return;\r\n    }\r\n    this.setState({ visualizingAlgorithm: true });\r\n    setTimeout(() => {\r\n      const { grid } = this.state;\r\n      const startNode = grid[startNodeRow][startNodeCol];\r\n      const finishNode = grid[finishNodeRow][finishNodeCol];\r\n      const visitedNodesInOrder = bidirectionalGreedySearch(\r\n        grid,\r\n        startNode,\r\n        finishNode\r\n      );\r\n      const visitedNodesInOrderStart = visitedNodesInOrder[0];\r\n      const visitedNodesInOrderFinish = visitedNodesInOrder[1];\r\n      const isShortedPath = visitedNodesInOrder[2];\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrderBidirectionalGreedySearch(\r\n        visitedNodesInOrderStart[visitedNodesInOrderStart.length - 1],\r\n        visitedNodesInOrderFinish[visitedNodesInOrderFinish.length - 1]\r\n      );\r\n      this.animateBidirectionalAlgorithm(\r\n        visitedNodesInOrderStart,\r\n        visitedNodesInOrderFinish,\r\n        nodesInShortestPathOrder,\r\n        isShortedPath\r\n      );\r\n    }, this.state.speed);\r\n  }\r\n\r\n  animateMaze = (walls) => {\r\n    for (let i = 0; i <= walls.length; i++) {\r\n      if (i === walls.length) {\r\n        setTimeout(() => {\r\n          this.clearGrid();\r\n          let newGrid = getNewGridWithMaze(this.state.grid, walls);\r\n          this.setState({ grid: newGrid, generatingMaze: false });\r\n        }, i * this.state.mazeSpeed);\r\n        return;\r\n      }\r\n      let wall = walls[i];\r\n      let node = this.state.grid[wall[0]][wall[1]];\r\n      setTimeout(() => {\r\n        //Walls\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-wall-animated\";\r\n      }, i * this.state.mazeSpeed);\r\n    }\r\n  };\r\n\r\n  generateRandomMaze() {\r\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\r\n      return;\r\n    }\r\n    this.setState({ generatingMaze: true });\r\n    setTimeout(() => {\r\n      const { grid } = this.state;\r\n      const startNode = grid[startNodeRow][startNodeCol];\r\n      const finishNode = grid[finishNodeRow][finishNodeCol];\r\n      const walls = randomMaze(grid, startNode, finishNode);\r\n      this.animateMaze(walls);\r\n    }, this.state.mazeSpeed);\r\n  }\r\n\r\n  generateRecursiveDivisionMaze() {\r\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\r\n      return;\r\n    }\r\n    this.setState({ generatingMaze: true });\r\n    setTimeout(() => {\r\n      const { grid } = this.state;\r\n      const startNode = grid[startNodeRow][startNodeCol];\r\n      const finishNode = grid[finishNodeRow][finishNodeCol];\r\n      const walls = recursiveDivisionMaze(grid, startNode, finishNode);\r\n      this.animateMaze(walls);\r\n    }, this.state.mazeSpeed);\r\n  }\r\n\r\n  generateVerticalMaze() {\r\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\r\n      return;\r\n    }\r\n    this.setState({ generatingMaze: true });\r\n    setTimeout(() => {\r\n      const { grid } = this.state;\r\n      const startNode = grid[startNodeRow][startNodeCol];\r\n      const finishNode = grid[finishNodeRow][finishNodeCol];\r\n      const walls = verticalMaze(grid, startNode, finishNode);\r\n      this.animateMaze(walls);\r\n    }, this.state.mazeSpeed);\r\n  }\r\n\r\n  generateHorizontalMaze() {\r\n    if (this.state.visualizingAlgorithm || this.state.generatingMaze) {\r\n      return;\r\n    }\r\n    this.setState({ generatingMaze: true });\r\n    setTimeout(() => {\r\n      const { grid } = this.state;\r\n      const startNode = grid[startNodeRow][startNodeCol];\r\n      const finishNode = grid[finishNodeRow][finishNodeCol];\r\n      const walls = horizontalMaze(grid, startNode, finishNode);\r\n      this.animateMaze(walls);\r\n    }, this.state.mazeSpeed);\r\n  }\r\n\r\n  render() {\r\n    let { grid } = this.state;\r\n    return (\r\n      <React.Fragment>\r\n        <NavBar\r\n          visualizingAlgorithm={this.state.visualizingAlgorithm}\r\n          generatingMaze={this.state.generatingMaze}\r\n          visualizeDijkstra={this.visualizeDijkstra.bind(this)}\r\n          visualizeAStar={this.visualizeAStar.bind(this)}\r\n          visualizeGreedyBFS={this.visualizeGreedyBFS.bind(this)}\r\n          visualizeBidirectionalGreedySearch={this.visualizeBidirectionalGreedySearch.bind(\r\n            this\r\n          )}\r\n          visualizeBFS={this.visualizeBFS.bind(this)}\r\n          visualizeDFS={this.visualizeDFS.bind(this)}\r\n          visualizeRandomWalk={this.visualizeRandomWalk.bind(this)}\r\n          generateRandomMaze={this.generateRandomMaze.bind(this)}\r\n          generateRecursiveDivisionMaze={this.generateRecursiveDivisionMaze.bind(\r\n            this\r\n          )}\r\n          generateVerticalMaze={this.generateVerticalMaze.bind(this)}\r\n          generateHorizontalMaze={this.generateHorizontalMaze.bind(this)}\r\n          clearGrid={this.clearGrid.bind(this)}\r\n          clearPath={this.clearPath.bind(this)}\r\n          updateSpeed={this.updateSpeed.bind(this)}\r\n        />\r\n        <div\r\n          className={\r\n            this.state.visualizingAlgorithm || this.state.generatingMaze\r\n              ? \"grid-visualizing\"\r\n              : \"grid\"\r\n          }\r\n        >\r\n          {grid.map((row, rowId) => {\r\n            return (\r\n              <div key={rowId}>\r\n                {row.map((node, nodeId) => {\r\n                  const {\r\n                    row,\r\n                    col,\r\n                    isStart,\r\n                    isFinish,\r\n                    isVisited,\r\n                    isShortest,\r\n                    isWall,\r\n                  } = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeId}\r\n                      row={row}\r\n                      col={col}\r\n                      isStart={isStart}\r\n                      isFinish={isFinish}\r\n                      isVisited={isVisited}\r\n                      isShortest={isShortest}\r\n                      isWall={isWall}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                      width={this.state.width}\r\n                      height={this.state.height}\r\n                      numRows={this.state.numRows}\r\n                      numColumns={this.state.numColumns}\r\n                    ></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nfunction getInitialNum(width, height) {\r\n  let numColumns;\r\n  if (width > 1500) {\r\n    numColumns = Math.floor(width / 25);\r\n  } else if (width > 1250) {\r\n    numColumns = Math.floor(width / 22.5);\r\n  } else if (width > 1000) {\r\n    numColumns = Math.floor(width / 20);\r\n  } else if (width > 750) {\r\n    numColumns = Math.floor(width / 17.5);\r\n  } else if (width > 500) {\r\n    numColumns = Math.floor(width / 15);\r\n  } else if (width > 250) {\r\n    numColumns = Math.floor(width / 12.5);\r\n  } else if (width > 0) {\r\n    numColumns = Math.floor(width / 10);\r\n  }\r\n  let cellWidth = Math.floor(width / numColumns);\r\n  let numRows = Math.floor(height / cellWidth);\r\n  return [numRows, numColumns];\r\n}\r\n\r\nconst getInitialGrid = (numRows, numColumns) => {\r\n  let grid = [];\r\n  for (let row = 0; row < numRows; row++) {\r\n    let currentRow = [];\r\n    for (let col = 0; col < numColumns; col++) {\r\n      currentRow.push(createNode(row, col));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (row, col) => {\r\n  return {\r\n    row,\r\n    col,\r\n    isStart: row === startNodeRow && col === startNodeCol,\r\n    isFinish: row === finishNodeRow && col === finishNodeCol,\r\n    distance: Infinity,\r\n    totalDistance: Infinity,\r\n    isVisited: false,\r\n    isShortest: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n};\r\n\r\nconst getNewGridWithWalls = (grid, row, col) => {\r\n  let newGrid = grid.slice();\r\n  let node = grid[row][col];\r\n  let newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\nconst getNewGridWithMaze = (grid, walls) => {\r\n  let newGrid = grid.slice();\r\n  for (let wall of walls) {\r\n    let node = grid[wall[0]][wall[1]];\r\n    let newNode = {\r\n      ...node,\r\n      isWall: true,\r\n    };\r\n    newGrid[wall[0]][wall[1]] = newNode;\r\n  }\r\n  return newGrid;\r\n};\r\n\r\nconst getGridWithoutPath = (grid) => {\r\n  let newGrid = grid.slice();\r\n  for (let row of grid) {\r\n    for (let node of row) {\r\n      let newNode = {\r\n        ...node,\r\n        distance: Infinity,\r\n        totalDistance: Infinity,\r\n        isVisited: false,\r\n        isShortest: false,\r\n        previousNode: null,\r\n      };\r\n      newGrid[node.row][node.col] = newNode;\r\n    }\r\n  }\r\n  return newGrid;\r\n};\r\n\r\nconst updateNodesForRender = (\r\n  grid,\r\n  nodesInShortestPathOrder,\r\n  visitedNodesInOrder\r\n) => {\r\n  let newGrid = grid.slice();\r\n  for (let node of visitedNodesInOrder) {\r\n    if (\r\n      (node.row === startNodeRow && node.col === startNodeCol) ||\r\n      (node.row === finishNodeRow && node.col === finishNodeCol)\r\n    )\r\n      continue;\r\n    let newNode = {\r\n      ...node,\r\n      isVisited: true,\r\n    };\r\n    newGrid[node.row][node.col] = newNode;\r\n  }\r\n  for (let node of nodesInShortestPathOrder) {\r\n    if (node.row === finishNodeRow && node.col === finishNodeCol) {\r\n      return newGrid;\r\n    }\r\n    let newNode = {\r\n      ...node,\r\n      isVisited: false,\r\n      isShortest: true,\r\n    };\r\n    newGrid[node.row][node.col] = newNode;\r\n  }\r\n};\r\n\r\nconst getVisitedNodesInOrder = (\r\n  visitedNodesInOrderStart,\r\n  visitedNodesInOrderFinish\r\n) => {\r\n  let visitedNodesInOrder = [];\r\n  let n = Math.max(\r\n    visitedNodesInOrderStart.length,\r\n    visitedNodesInOrderFinish.length\r\n  );\r\n  for (let i = 0; i < n; i++) {\r\n    if (visitedNodesInOrderStart[i] !== undefined) {\r\n      visitedNodesInOrder.push(visitedNodesInOrderStart[i]);\r\n    }\r\n    if (visitedNodesInOrderFinish[i] !== undefined) {\r\n      visitedNodesInOrder.push(visitedNodesInOrderFinish[i]);\r\n    }\r\n  }\r\n  return visitedNodesInOrder;\r\n};\r\n\r\nexport default PathfindingVisualizer;","export function randomMaze(grid, startNode, finishNode) {\r\n  if (!startNode || !finishNode || startNode === finishNode) {\r\n    return false;\r\n  }\r\n  let walls = [];\r\n  for (let row = 0; row < grid.length; row++) {\r\n    for (let col = 0; col < grid[0].length; col++) {\r\n      if (\r\n        (row === startNode.row && col === startNode.col) ||\r\n        (row === finishNode.row && col === finishNode.col)\r\n      )\r\n        continue;\r\n      if (Math.random() < 0.33) {\r\n        walls.push([row, col]);\r\n      }\r\n    }\r\n  }\r\n  walls.sort(() => Math.random() - 0.5);\r\n  return walls;\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"bootstrap/js/dist/dropdown\";\r\nimport PathfindingVisualizer from \"./pathfindingVisualizer/pathfindingVisualizer\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <PathfindingVisualizer />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}